*
Binary Search
Time Complexity : o(log n)
*/

#include<iostream>
using namespace std;
int main()
{
    int t;
    cin >> t;  // Number of test cases
    while(t--)
    {
        int n, target;
        bool f = false;
        cin >> n;   //Number of elements in array, Array should be sorted
        int *a = new int[n];
        for(int i = 0; i < n; i++)
            cin >> a[i];
        cin >> target ; //Element to be searched
        int lb = 0, ub = n - 1;
        while(lb <= ub)
        {
            int mid = (lb + ub) / 2;
            if(a[mid] == target)
            {
                cout << "Element Found at index " << mid << endl;
                f = true;
                break;
            }
            else if(a[mid] > target)
                ub = mid - 1;
            else
                lb = mid + 1;
        }
        if(!f)
            cout << "Element not found!!!" << endl;
        return 0;
    }
}

// JUMP SEARCH

#include<iostream>
#include<cmath>
using namespace std;
int jumpSearch(int *a, int n, int k)
{
    int jump = sqrt(n);
    int start = 0;
    while(a[jump] <= k && jump < n)
    {
        start = jump;
        jump += sqrt(n);
        if(jump > n - 1)
            jump = n;
    }
    for(int i = start; i < jump; i++)
    {
        if(a[i] == k)
            return i;
    }
    return -1;
}
int main()
{
    int t;
    cin >> t;
    while(t--)
    {
        int n, k;
        cin >> n;
        int *a = new int[n];
        for(int i = 0; i < n; i++)
            cin >> a[i];
        cin >> k;
        int ans = jumpSearch(a, n, k);
        if(ans == -1)
            cout << "Element not found!!!" << endl;
        cout << "Element found at index " << ans << endl;
    }
}

//LINEAR SERACH 

// Linear Search
// Time Complexity : O(n)

#include<iostream>
using namespace std;
int main()
{
    int n, k;
    cin >> n;
    int a[n];
    for(int i = 0; i < n; i++)
        cin >> a[i];
    cin >> k;
    bool f;
    for(int i = 0; i < n; i++)
    {
        if(a[i] == k)
        {
            cout << "Element Found " << i + 1 << endl; // i + 1: as this is a linear search so number of comparisons will be the position of the element
            f = true;
            break;
        }
    }
    if(!f)
        cout << "Element not Found" << endl;
}
