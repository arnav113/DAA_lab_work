//Q1-
//Merge Sort
#include<iostream>
using namespace std;

int c = 0;
int inv = 0;
void mergeSort(int a[], int n)
{
    if(n == 0 || n == 1)
        return;
    int mid = n / 2;
    mergeSort(a, n - mid);
    mergeSort(a + mid, n - mid);
    int n1 = mid;
    int n2 = n - mid;
    int Lpart[n1], Rpart[n2];
    for(int i = 0; i < n1; i++)
        Lpart[i] = a[i];
    for(int j = 0; j < n2; j++)
        Rpart[j] = a[mid + j];
    int k = 0, i = 0, j = 0;
    while(i < n1 && j < n2)
    {
        if(Lpart[i] <= Rpart[j])
        {
            a[k] = Lpart[i];
            k++; i++;
            c++;
        }
        else{
            a[k] = Rpart[j];
            j++; k++;
            c++;
        }
    }
    for(; i < n1; i++)
    {
        a[k] = Lpart[i];
        k++;
    }
    for(; j < n2; j++)
    {
        a[k] = Rpart[j];
        k++;
    }
}
int main()
{
    int t;
    cin >> t;
    while(t--)
    {
        int n;
        cin >> n;
        int *a = new int[n];
        for(int i = 0; i < n; i++)
            cin >> a[i];
        mergeSort(a, n);
        for(int i = 0; i < n; i++)
            cout << a[i] << " ";
        cout << endl;
        cout << "Comparisons = " << c << endl;
        //cout << "Inversions = " << inv << endl;
    }
}

//Q2-
//QuickSort
#include<iostream>
using namespace std;

int c = 0;
int swaps = 0;
int partitionFunc(int a[], int l, int h)
{
    int pivot = a[l];
    int i = l, j = h;
    while(i < j)
    {
        do{
            i++;
            c++;
        }while(a[i] <= pivot);
        c--;
        do{
            j--;
            c++;
        }while(a[j] > pivot);
        c--;
        if(i < j){
            swap(a[i], a[j]);
            swaps++;
        }
    }
    swap(a[l], a[j]);
    swaps++;
    return j;
}

void quickSort(int a[], int l, int h)
{
    int j;
    if(l < h)
    {
        j = partitionFunc(a, l, h);
        quickSort(a, l, j);
        quickSort(a, j + 1, h);
    }
}

int main()
{
    int t;
    cin >> t;
    while(t--)
    {
        int n;
        cin >> n;
        int *a = new int[n];
        for(int i = 0; i < n; i++)
            cin >> a[i];
        quickSort(a, 0, n);
        for(int i = 0; i < n; i++)
            cout << a[i] << " ";
        cout << endl;
        cout << "comparisons = " << c << endl;
        cout << "Swaps = " << swaps << endl;
    }
}

//Q3-
//Program using priority queues
#include<iostream>
#include<queue>
#include<climits>
using namespace std;

int kthSmallest(int a[], int n, int k)
{
    priority_queue<int> maxh;
    for(int i = 0; i < n; i++)
    {
        maxh.push(a[i]);
        if(maxh.size() > k)
            maxh.pop();
    }
    if(maxh.empty())
        return INT_MIN;
    return maxh.top();
}

int kthLargest(int a[], int n, int k)
{
    priority_queue<int, vector<int>, greater<int>> minh;
    for(int i = 0; i < n; i++)
    {
        minh.push(a[i]);
        if(minh.size() > k)
            minh.pop();
    }
    if(!minh.empty())
        return minh.top();
    return INT_MAX;
}
int main()
{
    int t;
    cin >> t;
    while(t--)
    {
        int n;
        cin >> n;
        int *a = new int[n];
        for(int i = 0; i < n; i++)
            cin >> a[i];
        int k;
        cin >> k;
        int kLargest = kthLargest(a, n , k);
        if(kLargest == INT_MAX)
            cout << "Not Present" << endl;
        else
            cout << k <<"th Largest: " << kLargest << endl;
        int kSmallest = kthSmallest(a, n, k);
        if(kSmallest == INT_MIN)
            cout << "Not Present" << endl;
        else
            cout << k << "th smallest: " << kSmallest << endl;
    }
}
